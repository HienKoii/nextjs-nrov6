/*
CREATE TABLE napatm (
    id INT AUTO_INCREMENT PRIMARY KEY,
    transaction_id VARCHAR(255) NOT NULL UNIQUE,
    user_id INT NOT NULL,
    amount DECIMAL(15,2) NOT NULL,
    transaction_date DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES account(id),
    INDEX idx_transaction_id (transaction_id),
    INDEX idx_user_id (user_id)
);
*/

import { NextResponse } from "next/server";
import db from "@/config/db"; // K·∫øt n·ªëi database MySQL
import axios from "axios";
import { updateAccountMoney } from "@/services/accountService";

export async function POST(req) {
  try {
    // G·ªçi API l·∫•y l·ªãch s·ª≠ giao d·ªãch
    const response = await axios.get(`https://api.sieuthicode.net/historyapivcbv2/${process.env.TOKEN_ATM}`);

    // Log d·ªØ li·ªáu API tr·∫£ v·ªÅ ƒë·ªÉ ki·ªÉm tra
    console.log("üì¢ API Response Data:", response.data);

    // Ki·ªÉm tra n·∫øu `transactions` kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i l√† m·∫£ng
    const transactions = response.data?.transactions;

    if (!transactions) {
      console.error("üö´ L·ªói: API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu giao d·ªãch!");
      return NextResponse.json({ message: "API kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch" }, { status: 500 });
    }

    if (!Array.isArray(transactions)) {
      console.error("üö´ L·ªói: transactions kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng!", transactions);
      return NextResponse.json({ message: "L·ªói d·ªØ li·ªáu t·ª´ API" }, { status: 500 });
    }

    let count = 0;

    for (const transaction of transactions) {
      const { transactionID, amount, description, type, transactionDate } = transaction;

      if (type === "IN") {
        // D√πng regex ƒë·ªÉ t√¨m ID user trong description (h·ªó tr·ª£ c·∫£ "naptien" v√† "NAPTIEN") hihi
        const match = description?.match(/naptien (\d+)/i);

        if (match) {
          const userId = parseInt(match[1], 10);
          console.log(`üîç Ki·ªÉm tra userId: ${userId}`);

          // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
          const user = await db.query("SELECT id FROM account WHERE id = ?", [userId]);

          if (user.length > 0) {
            // Ki·ªÉm tra xem giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
            const checkExist = await db.query("SELECT * FROM napatm WHERE transaction_id = ?", [transactionID]);

            if (checkExist[0].length === 0) {
              console.log(`‚úÖ Giao d·ªãch ${transactionID} h·ª£p l·ªá, ti·∫øn h√†nh n·∫°p ti·ªÅn.`);

              // C·ªông ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng
              await updateAccountMoney(userId, amount, true, true);

              // L∆∞u l·ªãch s·ª≠ giao d·ªãch v√†o database
              await db.query("INSERT INTO napatm (transaction_id, user_id, amount, transaction_date) VALUES (?, ?, ?, ?)", [transactionID, userId, amount, transactionDate]);

              count++;
            } else {
              console.log(`‚ö†Ô∏è Giao d·ªãch ${transactionID} ƒë√£ t·ªìn t·∫°i, b·ªè qua.`);
            }
          } else {
            console.log(`üö´ User ID ${userId} kh√¥ng t·ªìn t·∫°i, b·ªè qua giao d·ªãch.`);
          }
        } else {
          console.log("üö´ Kh√¥ng t√¨m th·∫•y ID user trong m√¥ t·∫£ giao d·ªãch.");
        }
      } else {
        console.log("üîÑ Giao d·ªãch kh√¥ng ph·∫£i l√† n·∫°p ti·ªÅn, b·ªè qua.");
      }
    }

    console.log(`‚úÖ Ho√†n th√†nh x·ª≠ l√Ω. ƒê√£ c·ªông ti·ªÅn cho ${count} giao d·ªãch h·ª£p l·ªá.`);
    return NextResponse.json({ message: `ƒê√£ c·ªông ti·ªÅn cho ${count} giao d·ªãch h·ª£p l·ªá` }, { status: 200 });
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω auto deposit:", error);
    return NextResponse.json({ message: "L·ªói x·ª≠ l√Ω auto deposit" }, { status: 500 });
  }
}
